# Graphs
from falcor import *

def render_graph_PathTracerNRD():
    g = RenderGraph('PathTracerNRD')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('BSDFViewer.dll')
    loadRenderPassLibrary('DLSSPass.dll')
    loadRenderPassLibrary('Antialiasing.dll')
    loadRenderPassLibrary('BlitPass.dll')
    loadRenderPassLibrary('CSM.dll')
    loadRenderPassLibrary('DebugPasses.dll')
    loadRenderPassLibrary('DepthPass.dll')
    loadRenderPassLibrary('PathTracer.dll')
    loadRenderPassLibrary('ErrorMeasurePass.dll')
    loadRenderPassLibrary('FLIPPass.dll')
    loadRenderPassLibrary('SimplePostFX.dll')
    loadRenderPassLibrary('ForwardLightingPass.dll')
    loadRenderPassLibrary('GBuffer.dll')
    loadRenderPassLibrary('ImageLoader.dll')
    loadRenderPassLibrary('WhittedRayTracer.dll')
    loadRenderPassLibrary('MinimalPathTracer.dll')
    loadRenderPassLibrary('ModulateIllumination.dll')
    loadRenderPassLibrary('NRDPass.dll')
    loadRenderPassLibrary('PixelInspectorPass.dll')
    loadRenderPassLibrary('ReSTIRPass.dll')
    loadRenderPassLibrary('RTXDIPass.dll')
    loadRenderPassLibrary('SkyBox.dll')
    loadRenderPassLibrary('RTXGIPass.dll')
    loadRenderPassLibrary('SceneDebugger.dll')
    loadRenderPassLibrary('SDFEditor.dll')
    loadRenderPassLibrary('SSAO.dll')
    loadRenderPassLibrary('SVGFPass.dll')
    loadRenderPassLibrary('TemporalDelayPass.dll')
    loadRenderPassLibrary('TestPasses.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    loadRenderPassLibrary('Utils.dll')
    GBufferRT = createPass('GBufferRT', {'outputSize': IOSize.Default, 'samplePattern': SamplePattern.Halton, 'sampleCount': 32, 'useAlphaTest': True, 'adjustShadingNormals': True, 'forceCullMode': False, 'cull': CullMode.CullBack, 'texLOD': TexLODMode.Mip0, 'useTraceRayInline': False, 'useDOF': True})
    g.addPass(GBufferRT, 'GBufferRT')
    PathTracer = createPass('PathTracer', {'samplesPerPixel': 1, 'maxSurfaceBounces': 1, 'maxDiffuseBounces': 1, 'maxSpecularBounces': 1, 'maxTransmissionBounces': 0, 'sampleGenerator': 0, 'useBSDFSampling': True, 'useRussianRoulette': True, 'useNEE': True, 'useMIS': True, 'misHeuristic': MISHeuristic.Balance, 'misPowerExponent': 2.0, 'emissiveSampler': EmissiveLightSamplerType.Power, 'useRTXDI': True, 'RTXDIOptions': RTXDIOptions(mode=RTXDIMode.SpatiotemporalResampling, presampledTileCount=128, presampledTileSize=1024, storeCompactLightInfo=True, localLightCandidateCount=24, infiniteLightCandidateCount=8, envLightCandidateCount=8, brdfCandidateCount=1, brdfCutoff=0.0, testCandidateVisibility=True, biasCorrection=RTXDIBiasCorrection.Basic, depthThreshold=0.10000000149011612, normalThreshold=0.5, samplingRadius=30.0, spatialSampleCount=1, spatialIterations=5, maxHistoryLength=20, boilingFilterStrength=0.0, rayEpsilon=0.0010000000474974513, useEmissiveTextures=False, enableVisibilityShortcut=False, enablePermutationSampling=False), 'useAlphaTest': True, 'adjustShadingNormals': False, 'maxNestedMaterials': 2, 'useLightsInDielectricVolumes': False, 'disableCaustics': False, 'specularRoughnessThreshold': 0.25, 'primaryLodMode': TexLODMode.Mip0, 'lodBias': 0.0, 'useNRDDemodulation': True, 'outputSize': IOSize.Default, 'colorFormat': ColorFormat.LogLuvHDR})
    g.addPass(PathTracer, 'PathTracer')
    AccumulatePass = createPass('AccumulatePass', {'enabled': True, 'outputSize': IOSize.Default, 'autoReset': True, 'precisionMode': AccumulatePrecision.Single, 'subFrameCount': 0, 'maxAccumulatedFrames': 0})
    g.addPass(AccumulatePass, 'AccumulatePass')
    ToneMapperReference = createPass('ToneMapper', {'outputSize': IOSize.Default, 'useSceneMetadata': True, 'exposureCompensation': 10.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': ToneMapOp.Aces, 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': ExposureMode.AperturePriority})
    g.addPass(ToneMapperReference, 'ToneMapperReference')
    NRDDiffuseSpecular = createPass('NRD', {'enabled': True, 'method': NRDMethod.RelaxDiffuseSpecular, 'outputSize': IOSize.Default, 'worldSpaceMotion': True, 'disocclusionThreshold': 2.0, 'maxIntensity': 250.0, 'diffusePrepassBlurRadius': 16.0, 'specularPrepassBlurRadius': 16.0, 'diffuseMaxAccumulatedFrameNum': 31, 'specularMaxAccumulatedFrameNum': 31, 'diffuseMaxFastAccumulatedFrameNum': 2, 'specularMaxFastAccumulatedFrameNum': 2, 'diffusePhiLuminance': 2.0, 'specularPhiLuminance': 1.0, 'diffuseLobeAngleFraction': 0.800000011920929, 'specularLobeAngleFraction': 0.8999999761581421, 'roughnessFraction': 0.5, 'diffuseHistoryRejectionNormalThreshold': 0.0, 'specularVarianceBoost': 1.0, 'specularLobeAngleSlack': 10.0, 'disocclusionFixEdgeStoppingNormalPower': 8.0, 'disocclusionFixMaxRadius': 32.0, 'disocclusionFixNumFramesToFix': 4, 'historyClampingColorBoxSigmaScale': 2.0, 'spatialVarianceEstimationHistoryThreshold': 4, 'atrousIterationNum': 6, 'minLuminanceWeight': 0.0, 'depthThreshold': 0.019999999552965164, 'luminanceEdgeStoppingRelaxation': 0.5, 'normalEdgeStoppingRelaxation': 0.30000001192092896, 'roughnessEdgeStoppingRelaxation': 0.30000001192092896, 'enableAntiFirefly': False, 'enableReprojectionTestSkippingWithoutMotion': False, 'enableSpecularVirtualHistoryClamping': False, 'enableRoughnessEdgeStopping': True, 'enableMaterialTestForDiffuse': False, 'enableMaterialTestForSpecular': False})
    g.addPass(NRDDiffuseSpecular, 'NRDDiffuseSpecular')
    NRDDeltaReflection = createPass('NRD', {'enabled': True, 'method': NRDMethod.RelaxDiffuse, 'outputSize': IOSize.Default, 'worldSpaceMotion': False, 'disocclusionThreshold': 2.0, 'maxIntensity': 250.0, 'diffusePrepassBlurRadius': 16.0, 'diffuseMaxAccumulatedFrameNum': 31, 'diffuseMaxFastAccumulatedFrameNum': 2, 'diffusePhiLuminance': 2.0, 'diffuseLobeAngleFraction': 0.800000011920929, 'diffuseHistoryRejectionNormalThreshold': 0.0, 'disocclusionFixEdgeStoppingNormalPower': 8.0, 'disocclusionFixMaxRadius': 32.0, 'disocclusionFixNumFramesToFix': 4, 'historyClampingColorBoxSigmaScale': 2.0, 'spatialVarianceEstimationHistoryThreshold': 1, 'atrousIterationNum': 6, 'minLuminanceWeight': 0.0, 'depthThreshold': 0.019999999552965164, 'enableAntiFirefly': False, 'enableReprojectionTestSkippingWithoutMotion': True, 'enableMaterialTestForDiffuse': False})
    g.addPass(NRDDeltaReflection, 'NRDDeltaReflection')
    NRDDeltaTransmission = createPass('NRD', {'enabled': True, 'method': NRDMethod.RelaxDiffuse, 'outputSize': IOSize.Default, 'worldSpaceMotion': False, 'disocclusionThreshold': 2.0, 'maxIntensity': 250.0, 'diffusePrepassBlurRadius': 16.0, 'diffuseMaxAccumulatedFrameNum': 31, 'diffuseMaxFastAccumulatedFrameNum': 2, 'diffusePhiLuminance': 2.0, 'diffuseLobeAngleFraction': 0.800000011920929, 'diffuseHistoryRejectionNormalThreshold': 0.0, 'disocclusionFixEdgeStoppingNormalPower': 8.0, 'disocclusionFixMaxRadius': 32.0, 'disocclusionFixNumFramesToFix': 4, 'historyClampingColorBoxSigmaScale': 2.0, 'spatialVarianceEstimationHistoryThreshold': 4, 'atrousIterationNum': 6, 'minLuminanceWeight': 0.0, 'depthThreshold': 0.019999999552965164, 'enableAntiFirefly': False, 'enableReprojectionTestSkippingWithoutMotion': True, 'enableMaterialTestForDiffuse': False})
    g.addPass(NRDDeltaTransmission, 'NRDDeltaTransmission')
    NRDReflectionMotionVectors = createPass('NRD', {'enabled': True, 'method': NRDMethod.SpecularReflectionMv, 'outputSize': IOSize.Default, 'worldSpaceMotion': False, 'disocclusionThreshold': 2.0, 'maxIntensity': 1000.0})
    g.addPass(NRDReflectionMotionVectors, 'NRDReflectionMotionVectors')
    NRDTransmissionMotionVectors = createPass('NRD', {'enabled': True, 'method': NRDMethod.SpecularDeltaMv, 'outputSize': IOSize.Default, 'worldSpaceMotion': False, 'disocclusionThreshold': 2.0, 'maxIntensity': 1000.0})
    g.addPass(NRDTransmissionMotionVectors, 'NRDTransmissionMotionVectors')
    ModulateIllumination = createPass('ModulateIllumination', {'useEmission': True, 'useDiffuseReflectance': True, 'useDiffuseRadiance': True, 'useSpecularReflectance': True, 'useSpecularRadiance': True, 'useDeltaReflectionEmission': True, 'useDeltaReflectionReflectance': True, 'useDeltaReflectionRadiance': True, 'useDeltaTransmissionEmission': True, 'useDeltaTransmissionReflectance': True, 'useDeltaTransmissionRadiance': True, 'useResidualRadiance': False, 'outputSize': IOSize.Default})
    g.addPass(ModulateIllumination, 'ModulateIllumination')
    DLSS = createPass('DLSSPass', {'enabled': True, 'outputSize': IOSize.Default, 'profile': DLSSProfile.MaxPerf, 'motionVectorScale': DLSSMotionVectorScale.Relative, 'isHDR': True, 'sharpness': 0.0, 'exposure': 0.0})
    g.addPass(DLSS, 'DLSS')
    ToneMapperNRD = createPass('ToneMapper', {'outputSize': IOSize.Default, 'useSceneMetadata': True, 'exposureCompensation': 10.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': ToneMapOp.Aces, 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': ExposureMode.AperturePriority})
    g.addPass(ToneMapperNRD, 'ToneMapperNRD')
    AccumulatePass0 = createPass('AccumulatePass', {'enabled': False, 'outputSize': IOSize.Default, 'autoReset': True, 'precisionMode': AccumulatePrecision.Single, 'subFrameCount': 0, 'maxAccumulatedFrames': 0})
    g.addPass(AccumulatePass0, 'AccumulatePass0')
    g.addEdge('GBufferRT.vbuffer', 'PathTracer.vbuffer')
    g.addEdge('GBufferRT.viewW', 'PathTracer.viewW')
    g.addEdge('PathTracer.color', 'AccumulatePass.input')
    g.addEdge('AccumulatePass.output', 'ToneMapperReference.src')
    g.addEdge('PathTracer.nrdDiffuseRadianceHitDist', 'NRDDiffuseSpecular.diffuseRadianceHitDist')
    g.addEdge('PathTracer.nrdSpecularRadianceHitDist', 'NRDDiffuseSpecular.specularRadianceHitDist')
    g.addEdge('GBufferRT.mvecW', 'NRDDiffuseSpecular.mvec')
    g.addEdge('GBufferRT.normWRoughnessMaterialID', 'NRDDiffuseSpecular.normWRoughnessMaterialID')
    g.addEdge('GBufferRT.linearZ', 'NRDDiffuseSpecular.viewZ')
    g.addEdge('PathTracer.nrdDeltaReflectionHitDist', 'NRDReflectionMotionVectors.specularHitDist')
    g.addEdge('GBufferRT.linearZ', 'NRDReflectionMotionVectors.viewZ')
    g.addEdge('GBufferRT.normWRoughnessMaterialID', 'NRDReflectionMotionVectors.normWRoughnessMaterialID')
    g.addEdge('GBufferRT.mvec', 'NRDReflectionMotionVectors.mvec')
    g.addEdge('PathTracer.nrdDeltaReflectionRadianceHitDist', 'NRDDeltaReflection.diffuseRadianceHitDist')
    g.addEdge('NRDReflectionMotionVectors.reflectionMvec', 'NRDDeltaReflection.mvec')
    g.addEdge('PathTracer.nrdDeltaReflectionNormWRoughMaterialID', 'NRDDeltaReflection.normWRoughnessMaterialID')
    g.addEdge('PathTracer.nrdDeltaReflectionPathLength', 'NRDDeltaReflection.viewZ')
    g.addEdge('GBufferRT.posW', 'NRDTransmissionMotionVectors.deltaPrimaryPosW')
    g.addEdge('PathTracer.nrdDeltaTransmissionPosW', 'NRDTransmissionMotionVectors.deltaSecondaryPosW')
    g.addEdge('GBufferRT.mvec', 'NRDTransmissionMotionVectors.mvec')
    g.addEdge('PathTracer.nrdDeltaTransmissionRadianceHitDist', 'NRDDeltaTransmission.diffuseRadianceHitDist')
    g.addEdge('NRDTransmissionMotionVectors.deltaMvec', 'NRDDeltaTransmission.mvec')
    g.addEdge('PathTracer.nrdDeltaTransmissionNormWRoughMaterialID', 'NRDDeltaTransmission.normWRoughnessMaterialID')
    g.addEdge('PathTracer.nrdDeltaTransmissionPathLength', 'NRDDeltaTransmission.viewZ')
    g.addEdge('PathTracer.nrdEmission', 'ModulateIllumination.emission')
    g.addEdge('PathTracer.nrdDiffuseReflectance', 'ModulateIllumination.diffuseReflectance')
    g.addEdge('NRDDiffuseSpecular.filteredDiffuseRadianceHitDist', 'ModulateIllumination.diffuseRadiance')
    g.addEdge('PathTracer.nrdSpecularReflectance', 'ModulateIllumination.specularReflectance')
    g.addEdge('NRDDiffuseSpecular.filteredSpecularRadianceHitDist', 'ModulateIllumination.specularRadiance')
    g.addEdge('PathTracer.nrdDeltaReflectionEmission', 'ModulateIllumination.deltaReflectionEmission')
    g.addEdge('PathTracer.nrdDeltaReflectionReflectance', 'ModulateIllumination.deltaReflectionReflectance')
    g.addEdge('NRDDeltaReflection.filteredDiffuseRadianceHitDist', 'ModulateIllumination.deltaReflectionRadiance')
    g.addEdge('PathTracer.nrdDeltaTransmissionEmission', 'ModulateIllumination.deltaTransmissionEmission')
    g.addEdge('PathTracer.nrdDeltaTransmissionReflectance', 'ModulateIllumination.deltaTransmissionReflectance')
    g.addEdge('NRDDeltaTransmission.filteredDiffuseRadianceHitDist', 'ModulateIllumination.deltaTransmissionRadiance')
    g.addEdge('PathTracer.nrdResidualRadianceHitDist', 'ModulateIllumination.residualRadiance')
    g.addEdge('GBufferRT.mvec', 'DLSS.mvec')
    g.addEdge('GBufferRT.linearZ', 'DLSS.depth')
    g.addEdge('ModulateIllumination.output', 'DLSS.color')
    g.addEdge('DLSS.output', 'AccumulatePass0.input')
    g.addEdge('AccumulatePass0.output', 'ToneMapperNRD.src')
    g.markOutput('ToneMapperNRD.dst')
    g.markOutput('ToneMapperReference.dst')
    return g
m.addGraph(render_graph_PathTracerNRD())

# Scene
m.loadScene('BistroExterior.fbx')
m.scene.renderSettings = SceneRenderSettings(useEnvLight=True, useAnalyticLights=True, useEmissiveLights=True, useGridVolumes=True)
m.scene.animated = False
m.scene.camera = m.scene.cameras[1]
m.scene.camera.position = float3(-19.782282,4.560097,-2.264846)
m.scene.camera.target = float3(-18.801353,4.405360,-2.147217)
m.scene.camera.up = float3(0.003860,0.999992,0.000465)
m.scene.cameraSpeed = 1.0

# Window Configuration
m.resizeSwapChain(1920, 1017)
m.ui = True

# Clock Settings
m.clock.time = 0
m.clock.framerate = 0
# If framerate is not zero, you can use the frame property to set the start frame
# m.clock.frame = 0

# Frame Capture
m.frameCapture.outputDir = '.'
m.frameCapture.baseFilename = 'Mogwai'

